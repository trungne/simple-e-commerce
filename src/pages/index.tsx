import {
  AppShell,
  Box,
  Dialog,
  Divider,
  Flex,
  Header,
  Navbar,
  ScrollArea,
  Space,
  TextInput,
} from "@mantine/core";
import { Card, Image, Text, Button, Group } from "@mantine/core";
import { useDisclosure } from "@mantine/hooks";

import Head from "next/head";
import { useState } from "react";
import type { Product } from "~/types/product";
import { api } from "~/utils/api";

export default function Home() {
  const [categoryFilter, setCategoryFilter] = useState<string | undefined>(
    undefined
  );

  const product = api.product.productList.useQuery({
    category: categoryFilter,
  });
  const category = api.product.categoryList.useQuery();

  const [isOpen, setIsOpen] = useState(false);

  const [productToShowInDialog, setProductToShowInDialog] = useState<Product>();

  //Temporary data for one product, when user click on one card
  const [productCategory, setProductCategory] = useState("");
  const [productDescription, setProductDescription] = useState("");
  const [productImage, setProductImage] = useState("");
  const [productName, setProductName] = useState("");
  const [productPrice, setProductPrice] = useState("");
  const [productQuantity, setProductQuantity] = useState(0);

  //Function to set temp data for one product
  const saveTempData = (
    category: string,
    description: string,
    image: string,
    name: string,
    price: string,
    quantity: number
  ) => {
    setProductCategory(category);
    setProductDescription(description);
    setProductImage(image);
    setProductName(name);
    setProductPrice(price);
    setProductQuantity(quantity);
  };

  //Function to clear temp data for one product
  const clearTempData = () => {
    setProductCategory("");
    setProductDescription("");
    setProductImage("");
    setProductName("");
    setProductPrice("");
    setProductQuantity(0);
  };

  //test display image
  const displayTempData = () => {
    console.log("product category: " + productCategory);
    console.log("product description: " + productDescription);
    console.log("product image: " + productImage);
    console.log("product name: " + productName);
    console.log("product price: " + productPrice);
    console.log("product quantity: " + productQuantity);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <AppShell
          padding="md"
          navbar={
            <Navbar width={{ base: 220 }} p="xs">
              <Navbar.Section mt="xs">{/* Header with logo */}</Navbar.Section>

              <Box>
                <Text
                  align="center"
                  fw={700}
                  fz="xl"
                  variant="gradient"
                  gradient={{ from: "green", to: "blue", deg: 45 }}
                >
                  Categories
                </Text>
                <Space h="md"></Space>
              </Box>
              <Divider />
              <Navbar.Section grow component={ScrollArea} mx="-xs" px="xs">
                {/* Navbar content */}
                <Button.Group orientation="vertical">
                  {category.data?.map((category, idx) => {
                    const isSelected = categoryFilter === category.name;

                    return (
                      <Button
                        onClick={() => {
                          setCategoryFilter(category.name);
                        }}
                        key={idx}
                        variant="subtle"
                        color={isSelected ? "blue" : "dark"}
                      >
                        {category.name}
                      </Button>
                    );
                  })}
                </Button.Group>
              </Navbar.Section>

              <Navbar.Section>{/* Footer with user */}</Navbar.Section>
            </Navbar>
          }
          header={
            <Header height={60} p="xs">
              {/* Header content */}
            </Header>
          }
          styles={(theme) => ({
            main: {
              backgroundColor:
                theme.colorScheme === "dark"
                  ? theme.colors.dark[8]
                  : theme.colors.gray[0],
            },
          })}
        >
          {/* Body */}
          <Flex
            mih={50}
            gap="md"
            justify="center"
            align="flex-start"
            direction="row"
            wrap="wrap"
          >
            {/**
             * product has:
             * category + description + id + image + name + price + quantity
             */}
            {product.data?.map((product) => {
              return (
                <div key={product.id}>
                  <Card
                    onClick={() => {
                      setProductToShowInDialog(product);
                    }}
                    style={{ width: 180, height: 250 }}
                    shadow="sm"
                    padding="sm"
                    withBorder
                  >
                    <Card.Section>
                      <Image src={product.image} height={100} alt="Image" />
                    </Card.Section>

                    <Group position="apart" mt="md" mb="xs">
                      <Text size="sm" weight={500} truncate>
                        {product.name}
                      </Text>
                    </Group>

                    <Text size="xs" color="dimmed" truncate>
                      {product.description}
                    </Text>

                    <Button
                      variant="light"
                      color="blue"
                      fullWidth
                      mt="lg"
                      radius="md"
                    >
                      Buy now
                    </Button>
                  </Card>
                </div>
              );
            })}
          </Flex>

          <Dialog
            opened={!!productToShowInDialog} // product is not undefined
            withCloseButton
            onClose={() => {
              setProductToShowInDialog(undefined);
            }}
          >
            <Text size="sm" mb="xs" weight={500}>
              Name: {productToShowInDialog?.name}
            </Text>
            <Text size="sm" mb="xs" weight={500}>
              Price: {productToShowInDialog?.price}
            </Text>
            <Text size="sm" mb="xs" weight={500}>
              Quantity: {productToShowInDialog?.quantity}
            </Text>
            <Text size="sm" mb="xs" weight={500}>
              Category: {productToShowInDialog?.category}
            </Text>
          </Dialog>
        </AppShell>
      </main>
    </>
  );
}
