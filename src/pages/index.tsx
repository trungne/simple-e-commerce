import {
  AppShell,
  Box,
  Flex,
  Navbar,
  Pagination,
  ScrollArea,
  Text,
  Button,
} from "@mantine/core";
import { useDebouncedState } from "@mantine/hooks";
import { useAtom } from "jotai";

import Head from "next/head";
import { useState } from "react";
import { ProductCard } from "~/components/ProductCard";
import { ProductCategory } from "~/components/ProductCategory";
import { ProductDrawer } from "~/components/ProductDrawer";
import { ProductModal } from "~/components/ProductModal";
import { SearchInput } from "~/components/SearchInput";
import { isProductDrawerOpenAtom } from "~/hooks/drawer";
import type { Product } from "~/types/product";
import { api } from "~/utils/api";

export default function Home() {
  const [, setIsProductDrawerOpen] = useAtom(isProductDrawerOpenAtom);

  const [categoryFilter, setCategoryFilter] = useState<string | undefined>(
    undefined
  );

  const [page, setPage] = useState(0);
  const [searchInput, setSearchInput] = useDebouncedState("", 500);

  const { data: productListResponse } = api.product.productList.useQuery({
    name: searchInput,
    category: categoryFilter,
    page,
    perPage: 12,
  });
  const { data: categoryResponse } = api.product.categoryList.useQuery();

  const [productToShowInDialog, setProductToShowInDialog] = useState<Product>();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <AppShell
          padding="md"
          navbar={
            <Navbar width={{ base: 220 }} p="xs">
              <Navbar.Section mt="xs">
                <Box mt="xs" mb="xs">
                  <SearchInput
                    onChange={(searchText) => {
                      setPage(0);
                      setSearchInput(searchText);
                    }}
                  />
                </Box>

                <Text
                  mt="xs"
                  mb="xs"
                  align="center"
                  fw={700}
                  fz="xl"
                  variant="gradient"
                  gradient={{ from: "green", to: "blue", deg: 45 }}
                >
                  Categories
                </Text>
              </Navbar.Section>

              <Navbar.Section
                className="rounded-md bg-slate-100"
                grow
                component={ScrollArea}
                mx="-xs"
                px="xs"
              >
                {/* Navbar content */}
                <Button.Group orientation="vertical">
                  {categoryResponse?.map((category, idx) => {
                    const isSelected = categoryFilter === category.name;

                    return (
                      <ProductCategory
                        count={category.count}
                        key={idx}
                        categoryName={category.name}
                        isSelected={isSelected}
                        onChange={(categoryName) => {
                          setPage(0);
                          if (isSelected) {
                            setCategoryFilter(undefined);
                            return;
                          }

                          setCategoryFilter(categoryName);
                        }}
                      />
                    );
                  })}
                </Button.Group>
              </Navbar.Section>

              <Navbar.Section mt="xs">
                <Flex justify="center">
                  <Button
                    onClick={() => {
                      setIsProductDrawerOpen(true);
                    }}
                    variant="fill"
                    className="grow bg-green-400 text-white"
                  >
                    Create
                  </Button>
                </Flex>
              </Navbar.Section>
            </Navbar>
          }
          // header={
          //   <Header height={60} p="xs">
          //     {/* Header content */}
          //   </Header>
          // }
          styles={(theme) => ({
            main: {
              backgroundColor:
                theme.colorScheme === "dark"
                  ? theme.colors.dark[8]
                  : theme.colors.gray[0],
            },
          })}
        >
          {/* Body */}
          <Flex h="100%" direction="column">
            {productListResponse?.data.length === 0 && (
              <Text align="center" size="lg">
                No Products Found!
              </Text>
            )}
            <Box className=" grid w-full grid-cols-2 gap-4 sm:grid-cols-3 md:grid-cols-4">
              {productListResponse?.data.map((product) => {
                return (
                  <ProductCard
                    key={product.id}
                    product={product}
                    onClick={() => {
                      setProductToShowInDialog(product);
                    }}
                  />
                );
              })}
            </Box>

            <Flex className="mt-auto" justify="center">
              <Pagination
                value={page + 1}
                onChange={(page) => {
                  setPage(page - 1);
                }}
                total={productListResponse?.totalPage ?? 0}
              />
            </Flex>
          </Flex>

          <ProductModal
            product={productToShowInDialog}
            onClose={() => {
              setProductToShowInDialog(undefined);
            }}
          />

          <ProductDrawer />
        </AppShell>
      </main>
    </>
  );
}
